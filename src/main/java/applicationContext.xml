<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
           
    <!--由CC配置！ -->
  <!--  <cache:annotation-driven cache-manager="concurrentHashMapCacheManager"/>  --> 
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config/>
    <!--定时任务的 定时器开关 -->
    <task:annotation-driven/>

    
    <bean id="cacheDemo" class="com.shch.CacheDemo"/>   
<!--     <bean id="cacheInterceptor" class="com.shch.cache.interceptor.CacheInterceptor">
       <property name="cacheMapping" ref="cacheMapping"></property>
    </bean> -->
    <bean id="cacheableCacheInterceptor" class="com.shch.cache.interceptor.CacheableCacheInterceptor">
        <property name="cacheOperation" ref="cacheOperation"></property>
    </bean>
    <bean id="cachePutCacheInterceptor" class="com.shch.cache.interceptor.CachePutCacheInterceptor">
        <property name="cacheOperation" ref="cacheOperation"></property>
    </bean>
    <bean id="cacheEvictCacheInterceptor" class="com.shch.cache.interceptor.CacheEvictCacheInterceptor">
        <property name="cacheOperation" ref="cacheOperation"></property>
    </bean>
    
     
     <bean id="cacheOperation" class="com.shch.cache.mapping.CacheOperation">
       <property name="cacheMapping" ref="cacheMapping"></property>
    </bean> 
     
    <bean id="compositeCacheManager" class="com.shch.cache.support.CompositeCacheManager" init-method="loadCache">
       <property name="cacheManagers">
         <list>
           <bean id="concurrentHashMapCacheManager" class="com.shch.cache.ShchCacheManager.ConcurrentHashMapCacheManager"
                 init-method="loadCacheMap">
             <property name="cacheList">
               <list>
                  <bean id="concurrentHashMapCache1"  class="com.shch.cache.ShchCache.ConcurrentHashMapCache">
                       <constructor-arg value="concurrentHashMap1"/>
                  </bean>             
                  <bean id="concurrentHashMapCache2"  class="com.shch.cache.ShchCache.ConcurrentHashMapCache">
                        <constructor-arg value="concurrentHashMap2"/>
                  </bean>     
                  <!-- 可以再多配置几个Cache实例 -->             
              </list>      
            </property>   
           </bean>
           
           <!-- 可以再多配置几个CacheManager实例 -->
         
         </list>       
       </property>         
   </bean>
    
	<bean id="cacheMapping" class="com.shch.cache.mapping.CacheMapping" >
	   <!--  <property name="readProp" ref="readProperty"></property>  -->
       <!-- <property name="cacheSettings" ref="cacheSettings"></property>      -->
       <property name="propertyConfigurer" ref="propertyConfigurer"></property>
	   <property name="compCacheManager" ref="compositeCacheManager"></property>
	</bean>
	<!--待验证classpath:application.properties是否有效？？ 指定初始化方法loadProperty()-->
<!--  	<bean id="readProperty" class="com.shch.cache.mapping.ReadProperty" init-method="loadProperty">
	  <property name="filePath" value="D:\\workspace-sts\\SHCHCache\\src\\main\\resources\\application.properties"></property>	
	</bean>
-->
	<!-- <bean id="cacheSettings" class="com.shch.cache.mapping.CacheSettings"> -->
<!--  <property name="stock" value="concurrentHashMap1"></property>
	  <property name="clear" value="concurrentHashMap2"></property>
  -->
 <!--    </bean> -->
  	<bean id="propertyConfigurer" class="com.shch.cache.mapping.config.PropertyConfigurer">
  	   <property name="locations">
  	   <list>
  	   <!-- 可以配置多个.properties文件 -->
  	     <value>classpath:application.properties</value>
  	   </list>
  	   </property>
  	</bean>


	<!-- .properties配置文件信息 -->
<!-- 	<util:properties id="config" location="classpath:application.properties"/> -->
	
	<!-- 定义具体任务执行类 -->
	<bean id="cacheScheduleUpdate1" class="com.shch.CacheScheduleUpdate1"></bean>
	<bean id="cacheScheduleUpdate2" class="com.shch.CacheScheduleUpdate2"></bean>
	<!-- 定时任务配置 -->
<!--     <task:scheduled-tasks> -->
       <!-- <task:scheduled ref="cacheScheduleUpdate" method="scheduleUpdateTask" cron="0/2 * * * * ? "/> -->
       <!-- 可以定义多个定时任务 -->
<!--     </task:scheduled-tasks> -->
      

 <bean id="cacheScheduleUpdateJob1" class="com.shch.cache.update.CacheScheduleUpdateJob1" init-method="updateCache"></bean>

     <!-- prototype类型，每次调用该Bean时，都会创建一个新的实例  -->
<bean id="cacheUpdateThread" class="com.shch.cache.update.CacheUpdateThread" scope="prototype"> </bean>

<bean id="stringSplitter" class="com.shch.cache.support.StringSplitter"></bean>

<!--以下配置参考网上	<cache:annotation-driven cache-manager="ShchCacheManager"/>   -->
	
	<!-- redis相关配置信息 -->

<!--     <bean id="poolconfig" class="redis.clients.jedis.JedisPoolConfig">
	     <property name="maxIdle" value="${redis.maxIdle}"></property> 
	     <property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
	</bean>
	
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">	  
	  <property name="hostName" value="${redis.host}"></property>\
	  <property name="port" value="${redis.port}"></property>
	  <property name="poolconfig"  ref="poolconfig"></property>
	</bean>
	  
	  <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
          <property name="connectionFactory" ref="jedisConnectionFactory"></property> 
          <property name="keySerializer"> 
                <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/> 
          </property> 
          <property name="valueSerializer"> 
                <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/> 
          </property> 
      </bean>

	<bean id="ShchCacheManager" class="com.shch.cache.ShchCache.ShchCacheManager">		
		<property name="caches">
 -->		
		<!-- 可以配置多个redis -->
<!--  		<set>
				<bean class="com.shch.cache.ShchCache.RedisCache">
				<property name="redisTemplate" ref="redisTemplate"></property>
				<property name="name" value="redis"></property>
				</bean>
-->					
				<!--  <bean class="com.shch.cache.ShchCache.RedisCache">
				<property name="redisTemplate" ref="redisTemplate"></property>
				<property name="name" value="redis"></property>
				</bean>
				-->
<!-- 		</set>
		</property>
	</bean>
 -->			
	
</beans>

